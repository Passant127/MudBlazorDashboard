@page "/employee"



@using System.Net.Http.Json
@using System.Threading


@using Bogus
@using Dashboard.Application.Contracts
@using Dashboard.Application.DTOS.EmployeeDtos
@using Dashboard.Application.Services
@using Dashboard.Core.Entities
@using Dashboard.Domain.Entities
@inject IEmployeeService _employeeService


<h3>Employees</h3>



<MudButton OnClick="AddItem" Color="Color.Success" Class="add-item-btn">Add Item</MudButton>
<MudButton OnClick="RemoveItem" Color="Color.Error" Class="remove-item-btn">Remove Item</MudButton>


<MudDataGrid @ref="dataGrid" T="EmployeeResponseDto" ServerData="ServerReload" Filterable="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Employees</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.FirstName" />
        <PropertyColumn Property="x => x.LastName" />
        <PropertyColumn Property="x => x.Email" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeResponseDto" />
    </PagerContent>
</MudDataGrid>

@code {
    private string searchString = null;
    private MudDataGrid<EmployeeResponseDto> dataGrid;

    private List<EmployeeResponseDto> _items = new List<EmployeeResponseDto>();

    protected override async Task  OnInitializedAsync()
    {
        _items = await _employeeService.GetAllEmployeesAsync();
        await dataGrid.ReloadServerData();
        StateHasChanged();
    }

    private async Task<GridData<EmployeeResponseDto>> ServerReload(GridState<EmployeeResponseDto> state)
    {
        await Task.Delay(300);

        var filteredItems = _items.Where(item =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            return item.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                   item.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        }).ToList();

        // Handle sorting
        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            filteredItems = sortDefinition.SortBy switch
            {
                nameof(Employee.FirstName) => filteredItems.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    item => item.FirstName).ToList(),
                nameof(Employee.LastName) => filteredItems.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    item => item.LastName).ToList(),
                _ => filteredItems
            };
        }

        // Handle paging
        var pagedData = filteredItems
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return new GridData<EmployeeResponseDto>
            {
                TotalItems = filteredItems.Count,
                Items = pagedData
            };
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await dataGrid.ReloadServerData();
    }

    private async Task AddItem()
    {

        var faker = new Faker<EmployeeRequestDto>()
                .RuleFor(r => r.FirstName, f => f.Lorem.Sentence())
                .RuleFor(r => r.LastName, f => f.Lorem.Sentence())
                .RuleFor(r => r.Email, f => f.Lorem.Sentence().ToLower());

        var records = faker.Generate(10000);
        await _employeeService.AddEmployeeAsync(records);
        await OnInitializedAsync();
    }

    private async Task RemoveItem()
    {
        if (_items.Any())
        {
            var employeeToRemove = _items.First();
            await _employeeService.DeleteEmployeeAsync(employeeToRemove.Id);
            _items = await _employeeService.GetAllEmployeesAsync();
            await dataGrid.ReloadServerData();
        }
    }
}
