@page "/vendor"



@using System.Net.Http.Json
@using System.Threading


@using Bogus
@using Dashboard.Application.Contracts
@using Dashboard.Application.DTOS.VendorDtos
@using Dashboard.Application.Services
@using Dashboard.Core.Entities
@using Dashboard.Domain.Entities
@inject IVendorService _vendorService


<h3>Vendors</h3>



<MudButton OnClick="AddItem" Color="Color.Success" Class="add-item-btn">Add Item</MudButton>
<MudButton OnClick="RemoveItem" Color="Color.Error" Class="remove-item-btn">Remove Item</MudButton>


<MudDataGrid @ref="dataGrid" T="VendorResponseDto" ServerData="ServerReload" Filterable="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Vendors</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.PhoneNumber" />
        <PropertyColumn Property="x => x.Name" />
     
    </Columns>
    <PagerContent>
        <MudDataGridPager T="VendorResponseDto" />
    </PagerContent>
</MudDataGrid>


@code {
    private string searchString = null;
    private MudDataGrid<VendorResponseDto> dataGrid;

    private List<VendorResponseDto> _items = new List<VendorResponseDto>();

    protected override async Task OnInitializedAsync()
    {
        _items = await _vendorService.GetAllVendorsAsync();
        await dataGrid.ReloadServerData();
        StateHasChanged();
    }

    private async Task<GridData<VendorResponseDto>> ServerReload(GridState<VendorResponseDto> state)
    {
        await Task.Delay(300);

        var filteredItems = _items.Where(item =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                   item.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        }).ToList();

        // Handle sorting
        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            filteredItems = sortDefinition.SortBy switch
            {
                nameof(Vendor.Name) => filteredItems.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    item => item.Name).ToList(),
                nameof(Vendor.PhoneNumber) => filteredItems.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    item => item.PhoneNumber).ToList(),
                _ => filteredItems
            };
        }

        // Handle paging
        var pagedData = filteredItems
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return new GridData<VendorResponseDto>
            {
                TotalItems = filteredItems.Count,
                Items = pagedData
            };
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await dataGrid.ReloadServerData();
    }

    private async Task AddItem()
    {

        var faker = new Faker<VendorRequestDto>()
                .RuleFor(r => r.Name, f => f.Lorem.Sentence())
                .RuleFor(r => r.PhoneNumber, f => f.Lorem.Sentence());

        var records = faker.Generate(10000);
        await _vendorService.AddVendorAsync(records);
        await OnInitializedAsync();
    }

    private async Task RemoveItem()
    {
        if (_items.Any())
        {
            var vendorToRemove = _items.First();
            await _vendorService.DeleteVendorAsync(vendorToRemove.Id);
            _items = await _vendorService.GetAllVendorsAsync();
            await dataGrid.ReloadServerData();
        }
    }
}
