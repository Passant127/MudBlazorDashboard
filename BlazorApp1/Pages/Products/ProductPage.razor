@page "/products"

@using System.Net.Http.Json
@using System.Threading
@using Bogus
@using Dashboard.Application.Contracts
@using Dashboard.Application.DTOS.ProductDtos
@using Dashboard.Application.SearchingCriteria
@using Dashboard.Application.SearchingCriteria.ProductSearchCriteria
@using Dashboard.Application.Services
@using Dashboard.Core.Entities
@using Dashboard.Domain.Entities
@using System.Diagnostics
@using StackExchange.Profiling
@inject IProductService _productService


<h3>ProductPage</h3>

<MudButton OnClick="AddItem" Color="Color.Success" Class="add-item-btn">Add Product </MudButton>
<MudButton OnClick="RemoveItem" Color="Color.Error" Class="remove-item-btn">Remove Product </MudButton>


<h5>Searching Criteria</h5>
<MudGrid>
    <MudTextField @bind-Value="productSearch.ProductName" OnBlur="GetSearchedItemsFromServer" Label="Product Name" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.ProductDescription" OnBlur="GetSearchedItemsFromServer" Label="Product Description" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.BrandName" OnBlur="GetSearchedItemsFromServer" Label="Product Brand" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.CategoryName" OnBlur="GetSearchedItemsFromServer" Label="Product Category" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.VendorName" OnBlur="GetSearchedItemsFromServer" Label="Vendor Name" Variant="Variant.Text"></MudTextField>
</MudGrid>
<MudDataGrid Items="@_items" T="ProductResponseDto"  Filterable="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Employees</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.Price" />
        <PropertyColumn Property="x => x.BrandName" />
        <PropertyColumn Property="x => x.CategoryName" />
        <PropertyColumn Property="x => x.VendorName" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ProductResponseDto" />
    </PagerContent>
</MudDataGrid>

@code {
    private string searchString = null;

    private List<ProductResponseDto> _items = new List<ProductResponseDto>();
    private ProductSearchCriteria productSearch = new ProductSearchCriteria();

    protected override async Task OnInitializedAsync()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        using (MiniProfiler.Current.Step("Get Data "))
        {

            _items = await _productService.GetAllProductsAsync(0,100);
        }
        using (MiniProfiler.Current.Step("Render Data"))
        {

            StateHasChanged();

        }
        stopwatch.Stop();
        double elapsedSeconds = stopwatch.Elapsed.TotalSeconds;

        Console.WriteLine(elapsedSeconds);

    }

    private void GetSearchedItemsFromServer()
    {
        using(MiniProfiler.Current.Step("Get Data on Search "))
        {

                 _items= _productService.SearchOnProductAsync(productSearch).Result.ToList();

        }
        StateHasChanged();
    }

    

    private async Task OnSearch()
    {
        GetSearchedItemsFromServer();
    }
     
    private async Task AddItem()
    {
        Guid brandidd = new Guid("69b6146f-9ec5-4497-adb6-08dcb6f7ea04");
        Guid categoryId = new Guid("6be35188-ad0a-4920-dd8b-08dcb6f7e0aa");
        Guid vendorId = new Guid("efb79dd6-fead-4e6f-f6bd-08dcb6f7e39d");
        var faker = new Faker<ProductRequestDto>()
                .RuleFor(r => r.Name, f => f.Random.Word())
                .RuleFor(r => r.Description, f => f.Lorem.Sentence())
                .RuleFor(r => r.Price, f => f.Random.UShort())
                .RuleFor(r => r.BrandId, f=>brandidd).
                RuleFor(r => r.CategoryId, f=>categoryId)
                .RuleFor(r => r.VendorId, f=>vendorId)
                ;

        var records = faker.Generate(150000);
        await _productService.AddProductAsync(records);
        await OnInitializedAsync();
    }

    private async Task RemoveItem()
    {
        if (_items.Any())
        {
            var productToRemove = _items.First();
            await _productService.DeleteProductAsync(productToRemove.Id);
            _items = await _productService.GetAllProductsAsync();
        }
    }
}
