@page "/products"

@using System.Net.Http.Json
@using System.Threading
@using Bogus
@using Dashboard.Application.Contracts
@using Dashboard.Application.DTOS.ProductDtos
@using Dashboard.Application.SearchingCriteria
@using Dashboard.Application.SearchingCriteria.ProductSearchCriteria
@using Dashboard.Application.Services
@using Dashboard.Core.Entities
@using Dashboard.Domain.Entities
@using System.Diagnostics
@using StackExchange.Profiling
@inject IProductService _productService

<h3>ProductPage</h3>

<MudButton OnClick="AddItem" Color="Color.Success" Class="add-item-btn">Add Product</MudButton>
<MudButton OnClick="RemoveItem" Color="Color.Error" Class="remove-item-btn">Remove Product</MudButton>

<h5>Searching Criteria</h5>

<MudGrid class="ml-2 my-5">
    <MudTextField @bind-Value="productSearch.ProductName" OnBlur="GetSearchedItemsFromServer" Label="Product Name" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.ProductDescription" OnBlur="GetSearchedItemsFromServer" Label="Product Description" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.BrandName" OnBlur="GetSearchedItemsFromServer" Label="Product Brand" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.CategoryName" OnBlur="GetSearchedItemsFromServer" Label="Product Category" Variant="Variant.Text"></MudTextField>
    <MudTextField @bind-Value="productSearch.VendorName" OnBlur="GetSearchedItemsFromServer" Label="Vendor Name" Variant="Variant.Text"></MudTextField>
</MudGrid>

<MudDataGrid Items="@_items" T="ProductResponseDto" Filterable="false" RowsPerPage="ItemsPerPage">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.Price" />
        <PropertyColumn Property="x => x.BrandName" />
        <PropertyColumn Property="x => x.CategoryName" />
        <PropertyColumn Property="x => x.VendorName" />
    </Columns>
    <PagerContent>
        <div class="d-flex align-center justify-center">
        <MudPagination SelectedChanged="PaginationChanged" Count="@((_totalItemCount + ItemsPerPage - 1) / ItemsPerPage)" Class="pa-4" />
        <MudSelect T="int" Label="Items Per Page" Variant="Variant.Text" ValueChanged="@(async s => await ChangeItemPerPage(s))">
            <MudSelectItem Value="5">5</MudSelectItem>
            <MudSelectItem Value="10">10</MudSelectItem>
            <MudSelectItem Value="25">25</MudSelectItem>
            <MudSelectItem Value="50">50</MudSelectItem>
        </MudSelect>
        </div>

    </PagerContent>
</MudDataGrid>

@code {
    private List<ProductResponseDto> _items = new List<ProductResponseDto>();
    private ProductSearchCriteria productSearch = new ProductSearchCriteria();
    private int CurrentPage = 1;
    private int ItemsPerPage = 100;
    private int _totalItemCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync(CurrentPage, ItemsPerPage);
    }

    private async Task LoadProductsAsync(int page, int itemsInPage)
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        if (string.IsNullOrEmpty(productSearch.ProductName) &&
            string.IsNullOrEmpty(productSearch.ProductDescription) &&
            string.IsNullOrEmpty(productSearch.BrandName) &&
            string.IsNullOrEmpty(productSearch.CategoryName) &&
            string.IsNullOrEmpty(productSearch.VendorName))
        {
            _items = await _productService.GetAllProductsAsync(page - 1, itemsInPage);
            using (MiniProfiler.Current.Step("Get products count"))
            {
                _totalItemCount = await _productService.GetProductsCount();
            }
        }
        else
        {
            var returnedValues = await _productService.SearchOnProductAsync(productSearch, page - 1, itemsInPage);
            _totalItemCount = returnedValues.Item2;
            _items = returnedValues.Item1;
        }

        stopwatch.Stop();
        double elapsedSeconds = stopwatch.Elapsed.TotalSeconds;
        Console.WriteLine($"Elapsed Time: {elapsedSeconds}s");

        StateHasChanged();
    }

    private async Task PaginationChanged(int pageNumber)
    {
        CurrentPage = pageNumber;
        await LoadProductsAsync(CurrentPage, ItemsPerPage);
    }

    private async Task ChangeItemPerPage(int newItemsPerPage)
    {
        ItemsPerPage = newItemsPerPage;
        CurrentPage = 1; 
        await LoadProductsAsync(CurrentPage, ItemsPerPage);
    }

    private async Task GetSearchedItemsFromServer()
    {
        await LoadProductsAsync(CurrentPage, ItemsPerPage);
    }

    private async Task AddItem()
    {
        Guid brandidd = new Guid("69b6146f-9ec5-4497-adb6-08dcb6f7ea04");
        Guid categoryId = new Guid("6be35188-ad0a-4920-dd8b-08dcb6f7e0aa");
        Guid vendorId = new Guid("efb79dd6-fead-4e6f-f6bd-08dcb6f7e39d");
        var faker = new Faker<ProductRequestDto>()
                .RuleFor(r => r.Name, f => f.Random.Word())
                .RuleFor(r => r.Description, f => f.Lorem.Sentence())
                .RuleFor(r => r.Price, f => f.Random.UShort())
                .RuleFor(r => r.BrandId, f => brandidd)
                .RuleFor(r => r.CategoryId, f => categoryId)
                .RuleFor(r => r.VendorId, f => vendorId);

        var records = faker.Generate(150000);
        await _productService.AddProductAsync(records);
        await LoadProductsAsync(CurrentPage, ItemsPerPage);
    }

    private async Task RemoveItem()
    {
        if (_items.Any())
        {
            var productToRemove = _items.First();
            await _productService.DeleteProductAsync(productToRemove.Id);
            await LoadProductsAsync(CurrentPage, ItemsPerPage);
        }
    }
}
